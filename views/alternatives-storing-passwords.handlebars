<div class="wrapper">
    <div class="content">
        <h1 class="welcome">Better Alternatives to Storing Passwords</h1>

<p>Let's face it: SHA-2 is very widely used and still recommended by web developers to this day. However, better alternatives exist to this, and they are (in no particular order): <em>bcrypt</em>, <em>scrypt</em>, and <em>PBKDF2</em>. Anyone of these, are now being more widely adopted and recommended by experts for several reasons. I advise you to do your own research, and to gain a little bit of background knowledge on these methods so you know what differs between these three. You can find some useful links at the bottom of this article.</p>

<p>From what I interpreted from these articles, I realized <em>scrypt</em> is the superior choice of the three. However, I will be covering bcrypt (the second best in the list) simply because there is <strong>no scrypt support built-in for PHP</strong>. <a href="https://github.com/DomBlack/php-scrypt">(As a matter of fact, all I could find was a PHP extension that was just recently started.)</a></p>

<p>* Please note I am not a cryptographer but out of pure research feel I have the ability to confidently post this information.</p>
<h2><strong>What Makes it so Effective?</strong></h2>

<hr />

<p>What makes bcrypt an effective choice? Here are some points:</p>
<ul>
  <li><strong>It's slow</strong> - Ironic at first, but consider why this would be an obstacle for people who want to find the plaintext password. The longer it takes to derive a password-key, it will take the same time for an attacker to find a plaintext match by bruteforcing. SHA-2 can produce hashes <em>very</em> quickly.</li>
  <li><strong>Bcrypt keeps up with Moore's Law</strong> - A bit like the first point, however, the more powerful hardware becomes, the faster it takes to compute SHA hashes. Bcrypt allows configured iterations (the <em>two digit cost parameter</em>).</li>
  <li><strong>The salt is required to be long</strong> - 22 characters in length is the number of characters that are required to use in PHP's bcrypt implementation. Salts have an advantage on their own.</li>
</ul>
<h2><strong>Using Bcrypt in Your PHP Code</strong></h2>

<hr />

<p>Now to get to actual code! PHP provides bcrypt support built-in through the <a href="http://php.net/crypt">crypt()</a> function. PHP 5.3.0+ users can only take advantage of the built-in support for bcrypt. However, I would recommend users have PHP versions 5.3.7 or above for optimal security. This is explained in the page regarding "potential high-bit attacks."</p>

<p>I found a class on NetTuts with a simple class utilizing bcrypt however I noticed it can be tweaked a bit to compensate for the above explanation.</p>

<pre class="brush: php">
class Bcrypt {

    // Default Blowfish algorithm
    private static $algorithm = '$2y$';
    // Cost parameter
    private static $cost = '10';

    // Checks if Bcrypt is available and enabled - Recommended to check before usage
    public static function isAvailable() {
        return defined('CRYPT_BLOWFISH') &amp;&amp; CRYPT_BLOWFISH;
    }

    // Mainly for internal use
    public static function uniqueSalt() {
        return substr(sha1(mt_rand()), 0, 22);
    }

    // Generate the hash
    public static function hash($password) {
    // Change from current Bcrypt algorithm depending on PHP version
        if (version_compare(PHP_VERSION, '5.3.7', '&amp;lt;'))
            self::$algorithm = '$2a$';

        return crypt($password, self::$algorithm . self::$cost . '$' . self::uniqueSalt());
    }

    // Compare password against a hash
    public static function checkPassword($hash, $password) {
        $new_hash = crypt($password, $hash);
        return ($hash == $new_hash);
    }
}
</pre>

<p>Example usage,</p>

<pre class="brush: php">
// Replace anthony123 with form input, etc...
if (Bcrypt::checkPassword($hashFromDatabase, 'anthony123'))
    echo 'Log in user...';
else
    echo 'Log in failed!';
</pre>
<h2><strong>Useful Links</strong></h2>

<hr />

<p><a href="http://security.stackexchange.com/questions/4781/do-any-security-experts-recommend-bcrypt-for-password-storage">http://security.stackexchange.com/questions/4781/do-any-security-experts-recommend-bcrypt-for-password-storage</a><br />
<a href="http://stackoverflow.com/questions/1561174/sha512-vs-blowfish-and-bcrypt">http://stackoverflow.com/questions/1561174/sha512-vs-blowfish-and-bcrypt</a><br />
<a href="http://www.tarsnap.com/scrypt/scrypt-slides.pdf">http://www.tarsnap.com/scrypt/scrypt-slides.pdf</a> (Especially slides 18-20)</p>

<p>That's all there is to it! Thanks for reading.</p>

    </div>
    <div class="push"></div>
</div>

<script type="text/javascript" src="/js/shCore.js"></script>
<script type="text/javascript" src="/js/shBrushPhp.js"></script>
<link href="/css/shCore.css" rel="stylesheet" type="text/css" />
<link href="/css/shThemeDefault.css" rel="stylesheet" type="text/css" />
<script type="text/javascript">
     SyntaxHighlighter.all();
</script>
